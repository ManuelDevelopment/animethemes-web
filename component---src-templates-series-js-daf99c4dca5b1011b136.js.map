{"version":3,"sources":["webpack:///./src/templates/series.js","webpack:///./src/components/container/sidebar.js","webpack:///./src/components/card/searchResult/index.js","webpack:///./src/components/card/searchResult/anime.js"],"names":["StyledSeriesPage","styled","div","gapsColumn","StyledCoverContainer","StyledCoverContainerFlex","StyledCoverItemContainer","StyledCover","img","SeriesDetailPage","series","pageContext","images","useAniList","anime","map","info","image","filter","sidebar","src","name","variant","StyledContainerSidebar","StyledSidebar","StyledBody","ContainerSidebar","children","props","StyledSearchResultCard","Card","StyledChildren","SearchResultCard","title","description","to","card","alt","link","maxLines","small","AnimeSearchResultCard","hideThemes","premiere","year","season","themes","length","slug","row","wrap","gapsBoth","slice","theme","entries","videos","filename","block","id","icon","faEllipsisH","fixedWidth"],"mappings":"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","file":"component---src-templates-series-js-daf99c4dca5b1011b136.js","sourcesContent":["import Title from \"components/text/title\";\nimport Flex from \"components/flex\";\nimport React from \"react\";\nimport ContainerSidebar from \"components/container/sidebar\";\nimport styled from \"styled-components\";\nimport {gapsColumn} from \"styles/mixins\";\nimport AnimeSearchResultCard from \"components/card/searchResult/anime\";\nimport useAniList from \"hooks/useAniList\";\n\nconst StyledSeriesPage = styled.div`\n    ${gapsColumn(\"1.5rem\")}\n`;\nconst StyledCoverContainer = styled.div`        \n    position: relative;\n    width: 100%;\n    padding-top: 150%;\n`;\nconst StyledCoverContainerFlex = styled.div`\n    display: flex;\n    flex-direction: row;\n\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n`;\nconst StyledCoverItemContainer = styled.div`\n    flex: 1;\n    width: 100%;\n    height: 100%;\n`;\nconst StyledCover = styled.img`\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n`;\n\nexport default function SeriesDetailPage({ pageContext: { series } }) {\n    const images = [\n        useAniList(series.anime[0]),\n        useAniList(series.anime[1]),\n        useAniList(series.anime[2]),\n        useAniList(series.anime[3])\n    ].map((info) => info.image).filter((image) => !!image);\n\n    const sidebar = (\n        <Flex gapsColumn=\"1.5rem\">\n            <StyledCoverContainer>\n                <StyledCoverContainerFlex>\n                    {images.map((image) => (\n                        <StyledCoverItemContainer>\n                            <StyledCover src={image}/>\n                        </StyledCoverItemContainer>\n                    ))}\n                </StyledCoverContainerFlex>\n            </StyledCoverContainer>\n        </Flex>\n    );\n\n    return (\n        <StyledSeriesPage>\n            <Title>{series.name}</Title>\n            <ContainerSidebar sidebar={sidebar}>\n                <Flex gapsColumn=\"1rem\">\n                    <Title variant=\"section\">Anime</Title>\n                    {series.anime.map((anime) => (\n                        <AnimeSearchResultCard anime={anime}/>\n                    ))}\n                </Flex>\n            </ContainerSidebar>\n        </StyledSeriesPage>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledContainerSidebar = styled.div`\n    display: flex;\n    flex-direction: row;\n\n    @media (max-width: 720px) {\n        flex-direction: column;\n    }\n`;\nconst StyledSidebar = styled.div`\n    flex: 1;\n\n    @media (min-width: 721px) {\n        margin-right: 2rem;\n    }\n`;\nconst StyledBody = styled.div`\n    flex: 3;\n`;\n\nexport default function ContainerSidebar({ sidebar, children, ...props }) {\n    return (\n        <StyledContainerSidebar {...props}>\n           <StyledSidebar>\n               {sidebar}\n           </StyledSidebar>\n           <StyledBody>\n               {children}\n           </StyledBody>\n       </StyledContainerSidebar>\n    );\n}\n","import React from \"react\";\nimport {Link} from \"gatsby\";\nimport Text from \"components/text\";\nimport Title from \"components/text/title\";\nimport styled from \"styled-components\";\nimport Card from \"components/card/index\";\n\nconst StyledSearchResultCard = styled(Card)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    padding: 0 1rem 0 0;\n`;\nconst StyledCover = styled.img`\n    width: 48px;\n    height: 64px;\n    object-fit: cover;\n`;\nconst StyledBody = styled.div`\n    flex: 1;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    padding: 0 1rem;\n`;\nconst StyledChildren = styled.div`\n    @media (max-width: 720px) {\n        display: none;\n    }\n`;\n\nexport default function SearchResultCard({ title, description, image, to, children, ...props }) {\n    const card = (\n        <StyledSearchResultCard {...props}>\n            <StyledCover alt=\"Cover\" src={image}/>\n            <StyledBody>\n                <Title variant=\"card\" link maxLines={2}>{title}</Title>\n                <Text small maxLines={1}>{description}</Text>\n            </StyledBody>\n            <StyledChildren>\n                {children}\n            </StyledChildren>\n        </StyledSearchResultCard>\n    );\n\n    if (to) {\n        return (\n            <Link to={to}>\n                {card}\n            </Link>\n        );\n    }\n\n    return card;\n}\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEllipsisH} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\nimport Flex from \"components/flex\";\nimport Text from \"components/text\";\nimport useAniList from \"hooks/useAniList\";\nimport SearchResultCard from \"components/card/searchResult\";\nimport Elevator from \"components/elevator\";\nimport ButtonPlay from \"components/button/play\";\n\nexport default function AnimeSearchResultCard({ anime, hideThemes = false }) {\n    const { image } = useAniList(anime);\n\n    let premiere = anime.year;\n    if (anime.season) {\n        premiere = anime.season + \" \" + premiere;\n    }\n\n    return (\n        <SearchResultCard\n            title={anime.name}\n            description={`Anime • ${premiere} • ${anime.themes.length} themes`}\n            image={image}\n            to={`/anime/${anime.slug}`}\n        >\n            {!hideThemes && (\n                <Elevator>\n                    <Flex row wrap gapsBoth=\"0.75rem\">\n                        {anime.themes.slice(0, 4).filter((theme) => {\n                            return theme.entries.length && theme.entries[0].videos.length;\n                        }).map((theme) => (\n                            <ButtonPlay key={theme.id} to={`/video/${theme.entries[0].videos[0].filename}`}>\n                                <Text small block>{theme.slug}</Text>\n                            </ButtonPlay>\n                        ))}\n                        {anime.themes.length > 4 && (\n                            <Button icon title=\"Show all themes\">\n                                <FontAwesomeIcon icon={faEllipsisH} fixedWidth/>\n                            </Button>\n                        )}\n                    </Flex>\n                </Elevator>\n            )}\n        </SearchResultCard>\n    );\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/components/card/index.js","webpack:///./src/components/switcher/index.js","webpack:///./src/components/card/searchResult/index.js","webpack:///./src/components/card/searchResult/anime.js","webpack:///./src/components/button/play.js","webpack:///./src/templates/season.js"],"names":["StyledCard","styled","div","props","theme","colors","secondaryTitle","primaryBackground","elevation","hoverable","css","Card","children","StyledSwitcher","elevatedPrimaryBackground","gapsRow","Switcher","StyledSearchResultCard","StyledCover","img","StyledBody","StyledChildren","SearchResultCard","title","description","image","to","card","alt","src","variant","link","maxLines","small","AnimeSearchResultCard","anime","useAniList","premiere","year","season","name","themes","length","alias","row","wrap","gapsBoth","slice","filter","entries","videos","map","filename","block","slug","id","icon","faEllipsisH","fixedWidth","StyledButtonPlay","Button","StyledPrefix","secondaryBackground","ButtonPlay","faPlay","StyledPage","gapsColumn","StyledYearContainer","StyledYear","StyledYearPrevious","StyledYearNext","seasonTitles","winter","spring","summer","fall","SeasonIndexPage","pageContext","animeList","yearList","seasonList","previousYear","indexOf","nextYear","silent","justifyContent","availableSeason","active","SeasonDetail","YearOverview","SeasonPreview","faChevronDown"],"mappings":"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","file":"component---src-templates-season-js-592c384c83ea68c8f46d.js","sourcesContent":["import React from \"react\";\nimport styled, {css} from \"styled-components\";\n\nconst StyledCard = styled.div`\n    padding: 1rem 1.5rem;\n    border-left: 4px solid ${(props) => props.theme.colors.secondaryTitle};\n    border-radius: 0 0.5rem 0.5rem 0;\n\n    background-color: ${(props) => props.theme.colors.primaryBackground[props.theme.elevation]};\n\n    ${(props) => props.hoverable && css`\n        cursor: pointer;\n\n        &:hover {\n            background-color: ${(props) => props.theme.colors.primaryBackground[props.theme.elevation + 1]};\n        }\n    `}\n`;\n\nexport default function Card({ children, ...props }) {\n    return (\n        <StyledCard {...props}>\n            {children}\n        </StyledCard>\n    )\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport elevatedPrimaryBackground from \"styles/helper\";\nimport {gapsRow} from \"styles/mixins\";\n\nconst StyledSwitcher = styled.div`\n    display: flex;\n    flex-direction: row;\n\n    background-color: ${elevatedPrimaryBackground};\n\n    border-radius: 1rem;\n\n    ${gapsRow(\"0.5rem\")}\n`;\n\nexport default function Switcher({ children, ...props }) {\n    return (\n        <StyledSwitcher {...props}>\n            {children}\n        </StyledSwitcher>\n    );\n}\n","import React from \"react\";\nimport {Link} from \"gatsby\";\nimport Text from \"components/text\";\nimport Title from \"components/text/title\";\nimport styled from \"styled-components\";\nimport Card from \"components/card/index\";\n\nconst StyledSearchResultCard = styled(Card)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    padding: 0 1rem 0 0;\n`;\nconst StyledCover = styled.img`\n    width: 48px;\n    height: 64px;\n    object-fit: cover;\n`;\nconst StyledBody = styled.div`\n    flex: 1;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    padding: 0 1rem;\n`;\nconst StyledChildren = styled.div`\n    @media (max-width: 720px) {\n        display: none;\n    }\n`;\n\nexport default function SearchResultCard({ title, description, image, to, children, ...props }) {\n    const card = (\n        <StyledSearchResultCard {...props}>\n            <StyledCover alt=\"Cover\" src={image}/>\n            <StyledBody>\n                <Title variant=\"card\" link maxLines={2}>{title}</Title>\n                <Text small maxLines={1}>{description}</Text>\n            </StyledBody>\n            <StyledChildren>\n                {children}\n            </StyledChildren>\n        </StyledSearchResultCard>\n    );\n\n    if (to) {\n        return (\n            <Link to={to}>\n                {card}\n            </Link>\n        );\n    }\n\n    return card;\n}\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEllipsisH} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\nimport Flex from \"components/flex\";\nimport Text from \"components/text\";\nimport useAniList from \"hooks/useAniList\";\nimport SearchResultCard from \"components/card/searchResult\";\nimport Elevator from \"components/elevator\";\nimport ButtonPlay from \"components/button/play\";\n\nexport default function AnimeSearchResultCard({ anime }) {\n    const { image } = useAniList(anime);\n\n    let premiere = anime.year;\n    if (anime.season) {\n        premiere = anime.season + \" \" + premiere;\n    }\n\n    return (\n        <SearchResultCard\n            title={anime.name}\n            description={`Anime • ${premiere} • ${anime.themes.length} themes`}\n            image={image}\n            to={`/anime/${anime.alias}`}\n        >\n            <Elevator>\n                <Flex row wrap gapsBoth=\"0.75rem\">\n                    {anime.themes.slice(0, 4).filter((theme) => {\n                        return theme.entries.length && theme.entries[0].videos.length;\n                    }).map((theme) => (\n                        <ButtonPlay key={theme.id} to={`/video/${theme.entries[0].videos[0].filename}`}>\n                            <Text small block>{theme.slug}</Text>\n                        </ButtonPlay>\n                    ))}\n                    {anime.themes.length > 4 && (\n                        <Button icon title=\"Show all themes\">\n                            <FontAwesomeIcon icon={faEllipsisH} fixedWidth/>\n                        </Button>\n                    )}\n                </Flex>\n            </Elevator>\n        </SearchResultCard>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPlay} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\n\nconst StyledButtonPlay = styled(Button)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    margin-left: 1rem;\n    padding: 0 0.5rem 0 0;\n`;\nconst StyledPrefix = styled.div`\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n\n    width: 2rem;\n    height: 2rem;\n    margin-left: -1rem;\n    border-radius: 1rem;\n\n    background-color: ${(props) => props.theme.colors.secondaryBackground};\n    color: ${(props) => props.theme.colors.primaryBackground[0]};\n`;\nconst StyledBody = styled.div`\n    padding: 0.5rem;  \n`;\n\nexport default function ButtonPlay({ children, ...props }) {\n    return (\n        <StyledButtonPlay {...props}>\n            <StyledPrefix>\n                <FontAwesomeIcon icon={faPlay} fixedWidth />\n            </StyledPrefix>\n            <StyledBody>\n                {children}\n            </StyledBody>\n        </StyledButtonPlay>\n    );\n}\n","import React from \"react\";\nimport {Link} from \"gatsby\";\nimport styled from \"styled-components\";\nimport AnimeSearchResultCard from \"components/card/searchResult/anime\";\nimport Title from \"components/text/title\";\nimport {gapsColumn} from \"styles/mixins\";\nimport Button from \"components/button\";\nimport Flex from \"components/flex\";\nimport Switcher from \"components/switcher\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faChevronDown} from \"@fortawesome/free-solid-svg-icons\";\n\nconst StyledPage = styled.div`\n    ${gapsColumn()}\n`;\nconst StyledYearContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`;\nconst StyledYear = styled.div`\n    flex: 1;\n\n    display: flex;\n\n    margin: 0 1rem;\n`;\nconst StyledYearPrevious = styled(StyledYear)`\n    justify-content: flex-end;\n`;\nconst StyledYearNext = styled(StyledYear)`\n    justify-content: flex-start;\n`;\n\nconst seasonTitles = {\n    winter: \"Winter\",\n    spring: \"Spring\",\n    summer: \"Summer\",\n    fall: \"Fall\"\n};\n\nexport default function SeasonIndexPage({ pageContext: { animeList, year, season, yearList, seasonList } }) {\n    const previousYear = yearList.indexOf(year) > 0 ? yearList[yearList.indexOf(year) - 1] : null;\n    const nextYear = yearList.indexOf(year) < yearList.length - 1 ? yearList[yearList.indexOf(year) + 1] : null;\n\n    return (\n        <StyledPage>\n            <StyledYearContainer>\n                <StyledYearPrevious>\n                    {previousYear && (\n                        <Link to={`/year/${previousYear}`}>\n                            <Button silent>{previousYear}</Button>\n                        </Link>\n                    )}\n                </StyledYearPrevious>\n                <Button to=\"/year\" silent>\n                    <Title>{year}</Title>\n                </Button>\n                <StyledYearNext>\n                    {nextYear && (\n                        <Link to={`/year/${nextYear}`}>\n                            <Button silent>{nextYear}</Button>\n                        </Link>\n                    )}\n                </StyledYearNext>\n            </StyledYearContainer>\n            <Flex row justifyContent=\"center\">\n                <Switcher>\n                    {seasonList.map((availableSeason) => (\n                        <Button to={`/year/${year}/${availableSeason}`} active={availableSeason === season}>{seasonTitles[availableSeason]}</Button>\n                    ))}\n                </Switcher>\n            </Flex>\n            {season ? (\n                <SeasonDetail season={season} year={year} animeList={animeList}/>\n            ) : (\n                <YearOverview year={year} seasonList={seasonList} animeList={animeList}/>\n            )}\n        </StyledPage>\n    );\n}\n\nfunction YearOverview({ year, seasonList, animeList }) {\n    return seasonList.map((season) => (\n        <SeasonPreview key={season} season={season} year={year} animeList={animeList[season]}/>\n    ));\n}\n\nfunction SeasonPreview({ season, year, animeList }) {\n    return (\n        <>\n            <Title variant=\"section\">{season}</Title>\n            <Flex gapsColumn=\"1rem\">\n                {animeList.slice(0, 3).map((anime) => (\n                    <AnimeSearchResultCard key={anime.id} anime={anime}/>\n                ))}\n            </Flex>\n            <Flex row justifyContent=\"center\">\n                <Button to={`/year/${year}/${season}`} icon>\n                    <FontAwesomeIcon icon={faChevronDown} fixedWidth/>\n                </Button>\n            </Flex>\n        </>\n    );\n}\n\nfunction SeasonDetail({ season, year, animeList }) {\n    return (\n        <>\n            <Title variant=\"section\">{`Anime from ${season} of ${year}`}</Title>\n            <Flex gapsColumn=\"1rem\">\n                {animeList.map((anime) => (\n                    <AnimeSearchResultCard key={anime.id} anime={anime}/>\n                ))}\n            </Flex>\n        </>\n    );\n}\n"],"sourceRoot":""}
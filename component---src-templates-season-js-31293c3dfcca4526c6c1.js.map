{"version":3,"sources":["webpack:///./src/components/switcher/index.js","webpack:///./src/components/card/searchResult/index.js","webpack:///./src/components/card/searchResult/anime.js","webpack:///./src/templates/season.js"],"names":["StyledSwitcher","styled","div","elevatedPrimaryBackground","gapsRow","Switcher","children","props","StyledSearchResultCard","Card","StyledCover","img","StyledBody","StyledChildren","SearchResultCard","title","description","image","to","card","alt","src","variant","link","maxLines","small","AnimeSearchResultCard","anime","hideThemes","useAniList","premiere","year","season","name","themes","length","slug","row","wrap","gapsBoth","slice","filter","theme","entries","videos","map","filename","block","id","icon","faEllipsisH","fixedWidth","StyledPage","gapsColumn","StyledYearContainer","StyledYear","StyledYearPrevious","StyledYearNext","seasonTitles","winter","spring","summer","fall","SeasonIndexPage","pageContext","animeList","yearList","seasonList","previousYear","indexOf","nextYear","silent","justifyContent","availableSeason","active","SeasonDetail","YearOverview","SeasonPreview","faChevronDown"],"mappings":"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","file":"component---src-templates-season-js-31293c3dfcca4526c6c1.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport elevatedPrimaryBackground from \"styles/helper\";\nimport {gapsRow} from \"styles/mixins\";\n\nconst StyledSwitcher = styled.div`\n    display: flex;\n    flex-direction: row;\n\n    background-color: ${elevatedPrimaryBackground};\n\n    border-radius: 1rem;\n\n    ${gapsRow(\"0.5rem\")}\n`;\n\nexport default function Switcher({ children, ...props }) {\n    return (\n        <StyledSwitcher {...props}>\n            {children}\n        </StyledSwitcher>\n    );\n}\n","import React from \"react\";\nimport {Link} from \"gatsby\";\nimport Text from \"components/text\";\nimport Title from \"components/text/title\";\nimport styled from \"styled-components\";\nimport Card from \"components/card/index\";\n\nconst StyledSearchResultCard = styled(Card)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    padding: 0 1rem 0 0;\n`;\nconst StyledCover = styled.img`\n    width: 48px;\n    height: 64px;\n    object-fit: cover;\n`;\nconst StyledBody = styled.div`\n    flex: 1;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    padding: 0 1rem;\n`;\nconst StyledChildren = styled.div`\n    @media (max-width: 720px) {\n        display: none;\n    }\n`;\n\nexport default function SearchResultCard({ title, description, image, to, children, ...props }) {\n    const card = (\n        <StyledSearchResultCard {...props}>\n            <StyledCover alt=\"Cover\" src={image}/>\n            <StyledBody>\n                <Title variant=\"card\" link maxLines={2}>{title}</Title>\n                <Text small maxLines={1}>{description}</Text>\n            </StyledBody>\n            <StyledChildren>\n                {children}\n            </StyledChildren>\n        </StyledSearchResultCard>\n    );\n\n    if (to) {\n        return (\n            <Link to={to}>\n                {card}\n            </Link>\n        );\n    }\n\n    return card;\n}\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEllipsisH} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\nimport Flex from \"components/flex\";\nimport Text from \"components/text\";\nimport useAniList from \"hooks/useAniList\";\nimport SearchResultCard from \"components/card/searchResult\";\nimport Elevator from \"components/elevator\";\nimport ButtonPlay from \"components/button/play\";\n\nexport default function AnimeSearchResultCard({ anime, hideThemes = false }) {\n    const { image } = useAniList(anime);\n\n    let premiere = anime.year;\n    if (anime.season) {\n        premiere = anime.season + \" \" + premiere;\n    }\n\n    return (\n        <SearchResultCard\n            title={anime.name}\n            description={`Anime • ${premiere} • ${anime.themes.length} themes`}\n            image={image}\n            to={`/anime/${anime.slug}`}\n        >\n            {!hideThemes && (\n                <Elevator>\n                    <Flex row wrap gapsBoth=\"0.75rem\">\n                        {anime.themes.slice(0, 4).filter((theme) => {\n                            return theme.entries.length && theme.entries[0].videos.length;\n                        }).map((theme) => (\n                            <ButtonPlay key={theme.id} to={`/video/${theme.entries[0].videos[0].filename}`}>\n                                <Text small block>{theme.slug}</Text>\n                            </ButtonPlay>\n                        ))}\n                        {anime.themes.length > 4 && (\n                            <Button icon title=\"Show all themes\">\n                                <FontAwesomeIcon icon={faEllipsisH} fixedWidth/>\n                            </Button>\n                        )}\n                    </Flex>\n                </Elevator>\n            )}\n        </SearchResultCard>\n    );\n}\n","import React from \"react\";\nimport {Link} from \"gatsby\";\nimport styled from \"styled-components\";\nimport AnimeSearchResultCard from \"components/card/searchResult/anime\";\nimport Title from \"components/text/title\";\nimport {gapsColumn} from \"styles/mixins\";\nimport Button from \"components/button\";\nimport Flex from \"components/flex\";\nimport Switcher from \"components/switcher\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faChevronDown} from \"@fortawesome/free-solid-svg-icons\";\n\nconst StyledPage = styled.div`\n    ${gapsColumn()}\n`;\nconst StyledYearContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`;\nconst StyledYear = styled.div`\n    flex: 1;\n\n    display: flex;\n\n    margin: 0 1rem;\n`;\nconst StyledYearPrevious = styled(StyledYear)`\n    justify-content: flex-end;\n`;\nconst StyledYearNext = styled(StyledYear)`\n    justify-content: flex-start;\n`;\n\nconst seasonTitles = {\n    winter: \"Winter\",\n    spring: \"Spring\",\n    summer: \"Summer\",\n    fall: \"Fall\"\n};\n\nexport default function SeasonIndexPage({ pageContext: { animeList, year, season, yearList, seasonList } }) {\n    const previousYear = yearList.indexOf(year) > 0 ? yearList[yearList.indexOf(year) - 1] : null;\n    const nextYear = yearList.indexOf(year) < yearList.length - 1 ? yearList[yearList.indexOf(year) + 1] : null;\n\n    return (\n        <StyledPage>\n            <StyledYearContainer>\n                <StyledYearPrevious>\n                    {previousYear && (\n                        <Link to={`/year/${previousYear}`}>\n                            <Button silent>{previousYear}</Button>\n                        </Link>\n                    )}\n                </StyledYearPrevious>\n                <Button to=\"/year\" silent>\n                    <Title>{year}</Title>\n                </Button>\n                <StyledYearNext>\n                    {nextYear && (\n                        <Link to={`/year/${nextYear}`}>\n                            <Button silent>{nextYear}</Button>\n                        </Link>\n                    )}\n                </StyledYearNext>\n            </StyledYearContainer>\n            <Flex row justifyContent=\"center\">\n                <Switcher>\n                    {seasonList.map((availableSeason) => (\n                        <Button to={`/year/${year}/${availableSeason}`} active={availableSeason === season}>{seasonTitles[availableSeason]}</Button>\n                    ))}\n                </Switcher>\n            </Flex>\n            {season ? (\n                <SeasonDetail season={season} year={year} animeList={animeList}/>\n            ) : (\n                <YearOverview year={year} seasonList={seasonList} animeList={animeList}/>\n            )}\n        </StyledPage>\n    );\n}\n\nfunction YearOverview({ year, seasonList, animeList }) {\n    return seasonList.map((season) => (\n        <SeasonPreview key={season} season={season} year={year} animeList={animeList[season]}/>\n    ));\n}\n\nfunction SeasonPreview({ season, year, animeList }) {\n    return (\n        <>\n            <Title variant=\"section\">{season}</Title>\n            <Flex gapsColumn=\"1rem\">\n                {animeList.slice(0, 3).map((anime) => (\n                    <AnimeSearchResultCard key={anime.id} anime={anime}/>\n                ))}\n            </Flex>\n            <Flex row justifyContent=\"center\">\n                <Button to={`/year/${year}/${season}`} icon>\n                    <FontAwesomeIcon icon={faChevronDown} fixedWidth/>\n                </Button>\n            </Flex>\n        </>\n    );\n}\n\nfunction SeasonDetail({ season, year, animeList }) {\n    return (\n        <>\n            <Title variant=\"section\">{`Anime from ${season} of ${year}`}</Title>\n            <Flex gapsColumn=\"1rem\">\n                {animeList.map((anime) => (\n                    <AnimeSearchResultCard key={anime.id} anime={anime}/>\n                ))}\n            </Flex>\n        </>\n    );\n}\n"],"sourceRoot":""}